EVENT=post-create analyzer=CCpp
        if grep '^TracerPid:[[:space:]]*[123456789]' proc_pid_status >/dev/null 2>&1; then
            # We see 'TracerPid: <nonzero>" in /proc/PID/status
            # Process is ptraced (gdb, strace, ltrace)
            # Debuggers have wide variety of bugs where they leak SIGTRAP
            # to traced process and nuke it. Ignore this crash.
            echo "The crashed process was ptraced - not saving the crash"
            exit 1  # abrt will remove the problem directory
        fi
        if grep -q ^ABRT_IGNORE_ALL=1 environ \
        || grep -q ^ABRT_IGNORE_CCPP=1 environ \
        ; then
            echo "ABRT_IGNORE variable is 1 - not saving the crash"
            # abrtd will delete the problem directory when we exit nonzero:
            exit 1
        fi
        # Try generating backtrace, if it fails we can still use
        # the hash generated by abrt-action-analyze-c
        ##satyr migration:
        #satyr abrt-create-core-stacktrace "$DUMP_DIR"
        abrt-action-generate-core-backtrace
        # Generate hash
        abrt-action-analyze-c &&
        abrt-action-list-dsos -m maps -o dso_list &&
        (
            # Try to save relevant log lines.
            # Can't do it as analyzer step, non-root can't read log.
            executable=`cat executable` &&
            base_executable=${executable##*/} &&
            # Test if the current version of journalctl has --system switch
            journalctl --system -n1 >/dev/null
            if [ $? -ne 0 ];
            then
                # It's not an error if /var/log/messages isn't readable:
                test -f /var/log/messages || exit 0
                test -r /var/log/messages || exit 0
                log=`grep -F -e "$base_executable" /var/log/messages | tail -99`
            else
                uid=`cat uid` &&
                log="[System Logs]:\n" &&
                log=$log`journalctl -b --system | grep -F -e "$base_executable" | tail -99` &&
                log=$log"\n[User Logs]:\n" &&
                log=$log`journalctl _UID="$uid" -b | grep -F -e "$base_executable" | tail -99` &&
                log=`echo -e "$log"`
            fi
            if test -n "$log"; then
                printf "%s\n" "$log" >var_log_messages
                # echo "Element 'var_log_messages' saved"
            fi
        )

EVENT=collect_xsession_errors analyzer=CCpp dso_list~=.*/libX11.*
        #
        # Where is X session error log - traditional or new location?
        #
        xsession_errors=~/.xsession-errors
        test -f "$xsession_errors" || xsession_errors=~/.cache/gdm/session.log
        #
        # We do not want to abort further processing,
        # thus we do not fail (exit with nonzero) if the file isn't there:
        test -f "$xsession_errors" || { echo "No $xsession_errors"; exit 0; }
        test -r "$xsession_errors" || { echo "Can't read $xsession_errors"; exit 0; }
        executable=`cat executable` &&
        base_executable=${executable##*/} &&
        grep -F -e "$base_executable" "$xsession_errors" | tail -999 >xsession_errors &&
        echo "Element 'xsession_errors' saved"

# TODO: can we still specify additional directories to search for debuginfos,
# or was this ability lost with move to python installer?
EVENT=analyze_LocalGDB analyzer=CCpp
        # Run GDB plugin to see if crash looks exploitable
        abrt-action-analyze-vulnerability
        # Run GDB to genereate backtrace
        abrt-action-analyze-ccpp-local --without-bodhi

EVENT=analyze_CCpp analyzer=CCpp
        abrt-action-perform-ccpp-analysis

<% if scope['abrt::report_Bugzilla'] -%>
<%= scope.function_template(['abrt/fragments/report_Bugzilla.erb']) %>
<% end -%>

<% if scope['abrt::report_uReport'] -%>
<%= scope.function_template(['abrt/fragments/report_uReport.erb']) %>
<% end -%>

<% if scope['abrt::report_gui'] -%>
<%= scope.function_template(['abrt/fragments/report_gui.erb']) %>
<% end -%>

<% if scope['abrt::report_cli'] -%>
<%= scope.function_template(['abrt/fragments/report_cli.erb']) %>
<% end -%>
