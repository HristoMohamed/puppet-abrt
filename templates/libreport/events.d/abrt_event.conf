# This configuration file specifies which programs should be run
# when the specified event occurs in problem directory lifetime.
#
# It consists of directives and rules.
#
# Directives start with a reserved word. Currently, there is only one
# directive, "include". Its format is "include FILE".
# It causes files which match FILE to be read and
# parsed as if they are inserted textually where this directive
# occurs. FILE can use shell pattern metacharacters (*,?,etc) to
# specify multiple files. Relative paths are interpreted relative
# to current file.
#
# Rule starts with a line with non-space leading character.
# All subsequent lines which start with space or tab form one rule.
# Note that separating newline is *retained*. Example:
# EVENT=post-create   date >/tmp/dt  # semicolon is not needed here!
#                     echo $HOSTNAME `uname -r`
#
# Rules may be commented out with #. One # is sufficient to comment out
# even a multi-line rule (no need to comment out every line).
#
# Rules specify which programs to run on the problem directory.
# Each rule may have conditions to be checked before the program is run.
#
# Conditions have form VAR[!]=VAL or VAL~=REGEX, where VAR is either
# word "EVENT" or a name of problem directory element to be checked
# (for example, "executable", "package", hostname" etc).
#
# If all conditions match, the remaining part of the rule
# (the "program" part) is run in the shell.
# All shell language constructs are valid.
# All stdout and stderr output is captured and passed to abrt
# and possibly to abrt's frontends and shown to the user.
#
# If the program terminates with nonzero exit code,
# the event processing is considered unsuccessful and is stopped.
# Last captured output line, if any, is considered to be
# the error message indicating the reason of the failure,
# and may be used by abrt as such.
#
# If the program terminates successfully, next rule is read
# and processed. This process is repeated until the end of this file.


# Determine in which package/component the crash happened (if not yet done):
EVENT=post-create component= remote!=1
        abrt-action-save-package-data

# Example: if you want all users (not just root) to be able to see some problems:
#EVENT=post-create
        rm uid; chmod a+rX .

# uid file is missing for problems visible to all users
# (oops scanner is often set up to not create it).
# Record username only if uid element is present:
EVENT=post-create
        if [ -f uid ]; then getent passwd "`cat uid`" | cut -d: -f1 >username; fi

# Record runlevel (if not yet done) and don't return non-0 if it fails:
EVENT=post-create runlevel=
        runlevel >runlevel 2>&1
        exit 0

# Notify a new crash
EVENT=notify package!=
        abrt-action-notify -d $DUMP_DIR
        true # ignore failures because we want to run all 'notify' events

# Notify a new occurrence of a single crash
EVENT=notify-dup package!=
        abrt-action-notify -d $DUMP_DIR
        true # ignore failures because we want to run all 'notify' events

<% if scope['abrt::report_sos'] -%>
<%= scope.function_template(['abrt/fragments/report_sos.erb']) %>
<% end -%>

<% if scope['abrt::report_uploader'] -%>
<%= scope.function_template(['abrt/fragments/report_uploader.erb']) %>
<% end -%>
